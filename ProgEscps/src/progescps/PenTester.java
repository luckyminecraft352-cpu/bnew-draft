package progescps;

import java.util.Arrays;
import java.util.List;
import java.util.Random;

public class PenTester extends Hero {
    private static final long serialVersionUID = 1L;
    private int probeCooldown = 0;
    private int breachCooldown = 0;
    private int stealthCooldown = 0;
    private boolean stealthActive = false;
    public boolean smokeBombActive;

    public PenTester() {
        super(new Random());
        this.maxHP = 200;
        this.hp = this.maxHP;
        this.minDmg = 25;
        this.maxDmg = 40;
        this.maxMana = 60;
        this.mana = this.maxMana;
        this.attackNames = new String[]{"Probe", "Breach", "Stealth", "Exploit Chain"};
    }

    @Override
    public String getClassName() {
        return "PenTester";
    }

    @Override
    protected List<String> getAllowedWeapons() {
        return Arrays.asList("Basic Exploit", "Advanced Exploit", "Zero-Day Exploit", "Kernel Exploit");
    }

    @Override
    protected List<String> getAllowedArmors() {
        return Arrays.asList("Encryption Cloak", "Firewall Vest");
    }

    @Override
    public void decrementCooldowns() {
        if (probeCooldown > 0) probeCooldown--;
        if (breachCooldown > 0) breachCooldown--;
        if (stealthCooldown > 0) stealthCooldown--;
        super.decrementCooldowns();
    }

    @Override
    public void applyPassiveEffects() {
        // Passive effects can be added here
    }

    @Override
    public void useSkill(int skillIdx, Enemy enemy) {
        double multiplier = getSkillMultiplier();
        switch (skillIdx) {
            case 0: // Probe
                if (probeCooldown == 0 && mana >= 15) {
                    int baseDamage = minDmg + random.nextInt(maxDmg - minDmg + 1);
                    int damage = (int)(baseDamage * multiplier);
                    System.out.println("You use Probe and deal " + damage + " damage!");
                    enemy.receiveDamage(damage);
                    mana -= 15;
                    probeCooldown = 3;
                } else {
                    System.out.println("Probe is on cooldown or insufficient mana! Using normal attack.");
                    super.useSkill(1, enemy);
                }
                break;
            case 1: // Breach
                if (breachCooldown == 0 && mana >= 20) {
                    int baseDamage = minDmg + random.nextInt(maxDmg - minDmg + 1);
                    int damage = (int)(baseDamage * 1.5 * multiplier);
                    System.out.println("You use Breach and deal " + damage + " damage!");
                    enemy.receiveDamage(damage);
                    mana -= 20;
                    breachCooldown = 4;
                } else {
                    System.out.println("Breach is on cooldown or insufficient mana! Using normal attack.");
                    super.useSkill(1, enemy);
                }
                break;
            case 2: // Stealth
                if (stealthCooldown == 0 && mana >= 15) {
                    System.out.println("You use Stealth, becoming untargetable for the next enemy attack!");
                    stealthActive = true;
                    mana -= 15;
                    stealthCooldown = 5;
                } else {
                    System.out.println("Stealth is on cooldown or insufficient mana! Using normal attack.");
                    super.useSkill(1, enemy);
                }
                break;
            case 3: // Exploit Chain
                if (mana >= 25) {
                    int baseDamage = minDmg + random.nextInt(maxDmg - minDmg + 1);
                    int damage = (int)(baseDamage * 2.0 * multiplier);
                    System.out.println("You use Exploit Chain and deal " + damage + " damage!");
                    enemy.receiveDamage(damage);
                    mana -= 25;
                } else {
                    System.out.println("Insufficient mana for Exploit Chain! Using normal attack.");
                    super.useSkill(1, enemy);
                }
                break;
            default:
                super.useSkill(1, enemy);
                break;
        }
    }

    @Override
    public void receiveDamage(int dmg) {
        if (stealthActive) {
            System.out.println("Stealth allows you to dodge the attack!");
            stealthActive = false;
            return;
        }
        super.receiveDamage(dmg);
    }
}